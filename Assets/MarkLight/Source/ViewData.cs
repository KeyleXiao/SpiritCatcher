#region Using Statements
using UnityEngine;
using System.Collections;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Xml.Linq;
using System.Reflection;
using System.Text;
using System.IO;
using MarkLight.Animation;
using MarkLight.Views.UI;
using MarkLight.Views;
#endregion

namespace MarkLight
{
    /// <summary>
    /// Contains logic for accessing and loading view data.
    /// </summary>
    public static class ViewData
    {
        #region Methods

        /// <summary>
        /// Goes through the view XML and creates/updates the scene objects.
        /// </summary>
        public static void GenerateViews()
        {
            var viewPresenter = ViewPresenter.Instance;

            viewPresenter.Views.Clear();
            viewPresenter.Views.AddRange(viewPresenter.ViewTypeData.Where(y => !y.HideInPresenter).Select(x => x.ViewName).OrderBy(x => x));

            viewPresenter.Themes.Clear();
            viewPresenter.Themes.AddRange(viewPresenter.ThemeData.Select(x => x.ThemeName).OrderBy(x => x));
            
            // validate views and check for cyclical dependencies
            foreach (var viewType in viewPresenter.ViewTypeData)
            {
                viewType.Dependencies.Clear();
                foreach (var dependencyName in viewType.DependencyNames)
                {
                    var dependency = viewPresenter.ViewTypeData.Where(x => String.Equals(x.ViewName, dependencyName, StringComparison.OrdinalIgnoreCase)).FirstOrDefault();
                    if (dependency == null)
                    {
                        Debug.LogError(String.Format("[MarkLight] {0}: View contains the child view \"{1}\" that could not be found.", viewType.ViewName, dependencyName));
                        continue;
                    }

                    viewType.Dependencies.Add(dependency);
                }
            }

            // destroy layout root
            if (viewPresenter.RootView != null)
            {
                GameObject.DestroyImmediate(viewPresenter.RootView);
            }

            // destroy any remaining objects under the view-presenter that should not be there
            if (viewPresenter.transform.childCount > 0)
            {                
                for (int i = viewPresenter.transform.childCount - 1; i >= 0; --i)
                {
                    var go = viewPresenter.transform.GetChild(i).gameObject;
                    Debug.LogWarning(String.Format("[MarkLight] Removed GameObject \"{0}\" under the view-presenter. View-presenter content is reserved for objects generated by the framework.", go.name));
                    GameObject.DestroyImmediate(go);
                }
            }

            // create main view
            if (!String.IsNullOrEmpty(viewPresenter.MainView))
            {
                var mainView = CreateView(viewPresenter.MainView, viewPresenter, viewPresenter);
                if (mainView != null)
                {
                    viewPresenter.RootView = mainView.gameObject;
                }
            }

            // initialize views
            viewPresenter.InitializeViews(viewPresenter.RootView);
        }

        /// <summary>
        /// Loads all view XML assets.
        /// </summary>
        public static void LoadAllXml(IEnumerable<TextAsset> xmlAssets)
        {
            var viewPresenter = ViewPresenter.Instance;
            
            // clear existing views from view presenter
            viewPresenter.Clear();            

            // load view xml
            foreach (var xmlAsset in xmlAssets)
            {
                LoadXml(xmlAsset);
            }

            // generate views
            GenerateViews();
        }

        /// <summary>
        /// Loads XML file to the view database.
        /// </summary>
        public static void LoadXml(TextAsset xmlAsset)
        {
            LoadXml(xmlAsset.text, xmlAsset.name);
        }

        /// <summary>
        /// Loads XML string to the view database.
        /// </summary>
        public static void LoadXml(string xml, string xmlAssetName = "")
        {            
            XElement xmlElement = null;
            try
            {
                xmlElement = XElement.Parse(xml);
            }
            catch (Exception e)
            {
                Debug.LogError(String.Format("[MarkLight] {0}: Error parsing view XML. Exception thrown: {1}", xmlAssetName, Utils.GetError(e)));
                return;
            }

            // what kind of XML file is this? 
            if (String.Equals(xmlElement.Name.LocalName, "Theme", StringComparison.OrdinalIgnoreCase))
            {
                // theme
                LoadThemeXml(xmlElement, xml, xmlAssetName);
            }
            else if (String.Equals(xmlElement.Name.LocalName, "Dictionary", StringComparison.OrdinalIgnoreCase))
            {
                // resource dictionary
            }
            else
            {
                // view
                LoadViewXml(xmlElement, xml);
            }
        }

        /// <summary>
        /// Loads view XML to view database.
        /// </summary>
        private static void LoadViewXml(XElement xmlElement, string xml)
        {
            var viewPresenter = ViewPresenter.Instance;
            viewPresenter.ViewTypeData.RemoveAll(x => String.Equals(x.ViewName, xmlElement.Name.LocalName, StringComparison.OrdinalIgnoreCase));

            var viewTypeData = new ViewTypeData();
            viewPresenter.ViewTypeData.Add(viewTypeData);

            viewTypeData.Xml = xml;
            viewTypeData.XmlElement = xmlElement;
            viewTypeData.ViewName = xmlElement.Name.LocalName;

            // set dependency names
            foreach (var descendant in xmlElement.Descendants())
            {
                if (!viewTypeData.DependencyNames.Contains(descendant.Name.LocalName, StringComparer.OrdinalIgnoreCase))
                {
                    viewTypeData.DependencyNames.Add(descendant.Name.LocalName);
                }
            }

            // set view type
            var type = GetViewType(viewTypeData.ViewName);
            if (type == null)
            {
                type = typeof(View);
            }

            // set if view is internal
            viewTypeData.HideInPresenter = type.GetCustomAttributes(typeof(HideInPresenter), false).Any();

            // set view action fields
            var viewActionType = typeof(ViewAction);
            var actionFields = type.GetFields().Where(x => x.FieldType == viewActionType).Select(y => y.Name);
            viewTypeData.ViewActionFields.AddRange(actionFields);

            // set dependency fields
            var viewFieldBaseType = typeof(ViewFieldBase);
            var dependencyFields = type.GetFields().Where(x => viewFieldBaseType.IsAssignableFrom(x.FieldType)).Select(y => y.Name);
            viewTypeData.DependencyFields.AddRange(dependencyFields);

            // set component fields
            var componentType = typeof(Component);
            var baseViewType = typeof(View);
            var componentFields = type.GetFields().Where(x => componentType.IsAssignableFrom(x.FieldType) &&
                !baseViewType.IsAssignableFrom(x.FieldType)).Select(y => y.Name);
            viewTypeData.ComponentFields.AddRange(componentFields);

            // set reference fields
            var referenceFields = type.GetFields().Where(x => baseViewType.IsAssignableFrom(x.FieldType) &&
                x.Name != "Parent" && x.Name != "LayoutParent").Select(y => y.Name);
            viewTypeData.ReferenceFields.AddRange(referenceFields);
            viewTypeData.ReferenceFields.Add("GameObject");

            // set excluded component fields
            var excludedComponentFields = type.GetCustomAttributes(typeof(ExcludeComponent), true);
            viewTypeData.ExcludedComponentFields.AddRange(excludedComponentFields.Select(x => (x as ExcludeComponent).ComponentFieldName));

            // set mapped fields and their converters and change handlers
            var mapFields = type.GetFields().SelectMany(x => x.GetCustomAttributes(typeof(MapViewField), true));
            var mapClassFields = type.GetCustomAttributes(typeof(MapViewField), true);            
            viewTypeData.MapViewFields.AddRange(mapFields.Select(x => (x as MapViewField).MapFieldData));
            viewTypeData.MapViewFields.AddRange(mapClassFields.Select(x => (x as MapViewField).MapFieldData));

            // .. add mapped dependency fields
            foreach (var field in type.GetFields())
            {
                var mapTo = field.GetCustomAttributes(typeof(MapTo), true).FirstOrDefault() as MapTo;
                if (mapTo == null)
                    continue;

                mapTo.MapFieldData.From = field.Name;
                viewTypeData.MapViewFields.Add(mapTo.MapFieldData);
            }

            //  .. init change handlers and value converters
            foreach (var mapField in viewTypeData.MapViewFields)
            {
                if (mapField.ValueConverterTypeSet)
                {
                    viewTypeData.ViewFieldConverters.Add(new ViewFieldConverterData { ValueConverterType = mapField.ValueConverterType, ViewField = mapField.To });
                }

                if (mapField.ChangeHandlerNameSet)
                {
                    viewTypeData.ViewFieldChangeHandlers.Add(new ViewFieldChangeHandler
                    {
                        ChangeHandlerName = mapField.ChangeHandlerName,
                        ViewField = mapField.To,
                        TriggerImmediately = mapField.TriggerChangeHandlerImmediately
                    });
                }
            }

            // set view field converters and change handlers
            foreach (var field in type.GetFields())
            {
                var valueConverter = field.GetCustomAttributes(typeof(ValueConverter), true).FirstOrDefault();
                if (valueConverter != null)
                {
                    viewTypeData.ViewFieldConverters.Add(new ViewFieldConverterData { ViewField = field.Name, ValueConverterType = valueConverter.GetType().Name });
                }

                var changeHandler = field.GetCustomAttributes(typeof(ChangeHandler), true).FirstOrDefault() as ChangeHandler;
                if (changeHandler != null)
                {
                    viewTypeData.ViewFieldChangeHandlers.Add(new ViewFieldChangeHandler { ViewField = field.Name, ChangeHandlerName = changeHandler.Name, TriggerImmediately = changeHandler.TriggerImmediately });
                }

                var notNotSetFromXml = field.GetCustomAttributes(typeof(NotSetFromXml), true).FirstOrDefault() as NotSetFromXml;
                if (notNotSetFromXml != null)
                {
                    viewTypeData.FieldsNotSetFromXml.Add(field.Name);
                }
            }

            // get the normal fields that aren't mapped
            var fields = type.GetFields().Where(x =>
                !viewTypeData.FieldsNotSetFromXml.Contains(x.Name) &&
                !viewTypeData.ReferenceFields.Contains(x.Name) &&
                !viewTypeData.ComponentFields.Contains(x.Name) &&
                !viewTypeData.ViewActionFields.Contains(x.Name) &&
                !viewTypeData.DependencyFields.Contains(x.Name) &&
                !x.IsStatic
            ).Select(y => y.Name);
            var properties = type.GetProperties().Where(x =>
                !viewTypeData.FieldsNotSetFromXml.Contains(x.Name) &&
                !viewTypeData.ReferenceFields.Contains(x.Name) &&
                !viewTypeData.ComponentFields.Contains(x.Name) &&
                !viewTypeData.ViewActionFields.Contains(x.Name) &&
                !viewTypeData.DependencyFields.Contains(x.Name) &&
                x.GetSetMethod() != null &&
                x.GetGetMethod() != null &&
                x.Name != "enabled" &&
                x.Name != "useGUILayout" &&
                x.Name != "tag" &&
                x.Name != "hideFlags" &&
                x.Name != "name"
            ).Select(y => y.Name);
            viewTypeData.ViewFields.AddRange(fields);
            viewTypeData.ViewFields.AddRange(properties);
        }

        /// <summary>
        /// Loads view XML to view database.
        /// </summary>
        private static void LoadThemeXml(XElement xmlElement, string xml, string xmlAssetName)
        {
            var viewPresenter = ViewPresenter.Instance;

            var themeNameAttr = xmlElement.Attribute("Name");
            if (themeNameAttr == null)
            {
                Debug.LogError(String.Format("[MarkLight] {0}: Error parsing theme XML. Name attribute missing.", xmlAssetName));
            }

            viewPresenter.ThemeData.RemoveAll(x => String.Equals(x.ThemeName, themeNameAttr.Value, StringComparison.OrdinalIgnoreCase));

            var themeData = new ThemeData();
            viewPresenter.ThemeData.Add(themeData);

            themeData.Xml = xml;
            themeData.XmlElement = xmlElement;
            themeData.ThemeName = themeNameAttr.Value;

            var baseDirectoryAttr = xmlElement.Attribute("BaseDirectory");
            var baseDirectory = baseDirectoryAttr != null ? baseDirectoryAttr.Value : String.Empty;
            themeData.BaseDirectory = baseDirectory;
            
            // load theme elements
            foreach (var childElement in xmlElement.Elements())
            {
                var themeElement = new ThemeElementData();
                themeElement.ViewName = childElement.Name.LocalName;

                var idAttr = childElement.Attribute("Id");
                if (idAttr != null)
                {
                    themeElement.Id = idAttr.Value;
                }

                var styleAttr = childElement.Attribute("Style");
                if (styleAttr != null)
                {
                    themeElement.Style = styleAttr.Value;
                }

                themeElement.XmlElement = childElement;
                themeElement.Xml = childElement.ToString();

                themeData.ThemeElementData.Add(themeElement);
            }
        }

        /// <summary>
        /// Creates view of specified type.
        /// </summary>
        public static T CreateView<T>(View layoutParent, View parent, string themeName = "", string id = "", string style = "", IEnumerable<XElement> contentXml = null) where T : View
        {
            Type viewType = typeof(T);
            return CreateView(viewType.Name, layoutParent, parent, themeName, id, style, contentXml) as T;
        }

        /// <summary>
        /// Creates view of specified type.
        /// </summary>
        public static View CreateView(string viewName, View layoutParent, View parent, string theme = "", string id = "", string style = "", IEnumerable<XElement> contentXml = null)
        {
            // Creates the views in the following order:
            // CreateView(view)
            //   Foreach child
            //     CreateView(child)
            //     SetViewValues(child)
            //   Foreach contentView
            //      CreateView(contentView)
            //      SetViewValues(contentView)
            //   SetViewValues(view)       
            //   SetThemeValues(view)     

            // TODO store away and re-use view templates

            // use default theme if no theme is specified
            if (String.IsNullOrEmpty(theme))
            {
                theme = ViewPresenter.Instance.DefaultTheme;
            }

            // create view from XML
            var viewTypeData = GetViewTypeData(viewName);
            if (viewTypeData == null)
            {
                return null;
            }

            // get view XML
            var viewType = GetViewType(viewName); 
            if (viewType == null)
            {
                viewType = typeof(View);
            }
            
            // create view game object with required components
            var go = new GameObject(viewTypeData.ViewName);
            if (typeof(UIView).IsAssignableFrom(viewType))
            {
                go.AddComponent<RectTransform>();
            }
            go.transform.SetParent(layoutParent.transform, false);

            // create view behavior and initialize it
            var view = go.AddComponent(viewType) as View;
            view.LayoutParent = layoutParent;
            view.Parent = parent;
            view.Id = id;
            view.Style = style;
            view.Theme = theme;
            view.Content = view;
            view.ViewXmlName = viewName;

            // set component fields
            foreach (var componentField in viewTypeData.ComponentFields)
            {
                if (viewTypeData.ExcludedComponentFields.Contains(componentField))
                    continue; // exclude component

                var componentFieldInfo = viewType.GetField(componentField);
                Component component = null;
                if (componentField == "Transform")
                {
                    component = go.transform;                    
                }
                else if(componentField == "RectTransform")
                {
                    component = go.transform as RectTransform;
                }
                else
                {
                    component = go.AddComponent(componentFieldInfo.FieldType);
                }
                componentFieldInfo.SetValue(view, component);
            }

            // set view action fields
            foreach (var viewActionField in viewTypeData.ViewActionFields)
            {
                var viewActionFieldInfo = viewType.GetField(viewActionField);
                viewActionFieldInfo.SetValue(view, new ViewAction(viewActionField));
            }

            // set dependency fields            
            foreach (var dependencyField in viewTypeData.DependencyFields)
            {
                var dependencyFieldInfo = viewType.GetField(dependencyField);
                var dependencyFieldInstance = TypeHelper.CreateInstance(dependencyFieldInfo.FieldType) as ViewFieldBase;
                dependencyFieldInfo.SetValue(view, dependencyFieldInstance);
                dependencyFieldInstance.ParentView = view;
                dependencyFieldInstance.ViewFieldPath = dependencyField;
            }

            // parse child XML and for each child create views and set their values
            foreach (var childElement in viewTypeData.XmlElement.Elements())
            {
                var childViewIdAttr = childElement.Attribute("Id");
                var childViewStyleAttr = childElement.Attribute("Style");
                var childThemeAttr = childElement.Attribute("Theme");

                var childView = CreateView(childElement.Name.LocalName, view, view,
                    childThemeAttr != null ? childThemeAttr.Value : theme,
                    childViewIdAttr != null ? childViewIdAttr.Value : String.Empty,
                    childViewStyleAttr != null ? childViewStyleAttr.Value : style, // TODO not setting this to null may cause problems lets see..
                    childElement.Elements());
                SetViewValues(childView, childElement, view);
            }

            // search for a content placeholder
            ContentPlaceholder contentContainer = view.Find<ContentPlaceholder>(true, view);
            var contentLayoutParent = view;
            if (contentContainer != null)
            {                
                contentLayoutParent = contentContainer.LayoutParent;
                view.Content = contentLayoutParent;

                // remove placeholder
                GameObject.DestroyImmediate(contentContainer.gameObject);
            }

            // parse content XML and for each content child create views and set their values
            if (contentXml != null)
            {
                // create content views
                foreach (var contentElement in contentXml)
                {
                    var contentElementIdAttr = contentElement.Attribute("Id");
                    var contentElementStyleAttr = contentElement.Attribute("Style");
                    var contentThemeAttr = contentElement.Attribute("Theme");

                    var contentView = CreateView(contentElement.Name.LocalName, contentLayoutParent, parent,
                        contentThemeAttr != null ? contentThemeAttr.Value : theme,
                        contentElementIdAttr != null ? contentElementIdAttr.Value : String.Empty,
                        contentElementStyleAttr != null ? contentElementStyleAttr.Value : style, // TODO not setting this to null may cause problems lets see..
                        contentElement.Elements());
                    SetViewValues(contentView, contentElement, parent);
                }                
            }

            // set view references
            foreach (var referenceField in viewTypeData.ReferenceFields)
            {
                // is this a reference to a view?
                var referencedView = view.Find<View>(x => String.Equals(x.Id, referenceField, StringComparison.OrdinalIgnoreCase),
                    true, view);
                if (referencedView != null)
                {
                    var referenceFieldInfo = viewType.GetField(referenceField);
                    referenceFieldInfo.SetValue(view, referencedView);
                }                    
            }

            // set view default values
            view.SetDefaultValues();

            // set internal view values that appear inside the root view element of the view XML file
            SetViewValues(view, viewTypeData.XmlElement, view);

            // set theme values
            var themeAttr = viewTypeData.XmlElement.Attribute("Theme");
            var themeData = GetThemeData(themeAttr != null ? themeAttr.Value : theme);

            if (themeData != null)
            {
                foreach (var themeElement in themeData.GetThemeElementData(view.ViewTypeName, view.Id, view.Style))
                {
                    SetViewValues(view, themeElement.XmlElement, view, new ValueConverterContext { BaseDirectory = themeData.BaseDirectory });
                }
            }

            return view;
        }

        /// <summary>
        /// Sets view values parsed from XML.
        /// </summary>
        private static void SetViewValues(View view, XElement xmlElement, View parent, ValueConverterContext context = null)
        {
            if (view == null)
                return;

            var viewTypeData = GetViewTypeData(view.ViewTypeName);
            foreach (var attribute in xmlElement.Attributes())
            {
                string viewFieldPath = attribute.Name.LocalName;
                string viewFieldValue = attribute.Value;

                // check if the field value is allowed to be be set from xml
                bool notAllowed = viewTypeData.FieldsNotSetFromXml.Contains(viewFieldPath); 
                if (notAllowed)
                {
                    Debug.LogError(String.Format("[MarkLight] {0}: Unable to assign value \"{1}\" to view field \"{2}.{3}\". Field not allowed to be set from xml.", view.GameObjectName, viewFieldValue, view.ViewTypeName, viewFieldPath));
                    continue;
                }

                // check if value contains a binding
                if (ViewFieldBinding.ValueHasBindings(viewFieldValue))
                {
                    view.AddBinding(viewFieldPath, viewFieldValue);
                    continue;
                }

                // check if we are setting a state-value
                int stateIndex = viewFieldPath.IndexOf('-', 0);
                if (stateIndex > 0)
                {
                    // check if we are setting a sub-state, i.e. the state of the target view
                    var stateViewField = viewFieldPath.Substring(stateIndex + 1);
                    var state = viewFieldPath.Substring(0, stateIndex);

                    bool isSubState = stateViewField.StartsWith("-");
                    if (isSubState)
                    {
                        stateViewField = stateViewField.Substring(1);
                    }
 
                    // setting the state of the source view
                    view.AddStateValue(state, stateViewField, attribute.Value, context, isSubState);
                    continue;
                }

                // get view field data
                var viewFieldData = view.GetViewFieldData(viewFieldPath);
                if (viewFieldData == null)
                {
                    Debug.LogError(String.Format("[MarkLight] {0}: Unable to assign value \"{1}\" to view field \"{2}\". View field not found.", view.GameObjectName, viewFieldValue, viewFieldPath));
                    continue;
                }

                // check if we are setting a view action handler
                if (viewFieldData.ViewFieldTypeName == "ViewAction")
                {
                    viewFieldData.SourceView.AddViewActionEntry(viewFieldData.ViewFieldPath, viewFieldValue, parent);
                    continue;
                }

                // we are setting a normal view field
                view.SetValue(attribute.Name.LocalName, attribute.Value, true, null, context, true);
            }
            
        }

        /// <summary>
        /// Gets view type data.
        /// </summary>
        public static ViewTypeData GetViewTypeData(string viewTypeName)
        {
            return ViewPresenter.Instance.GetViewTypeData(viewTypeName);
        }

        /// <summary>
        /// Gets theme data.
        /// </summary>
        public static ThemeData GetThemeData(string themeName)
        {
            return ViewPresenter.Instance.GetThemeData(themeName);
        }

        /// <summary>
        /// Gets view type from view type name.
        /// </summary>
        public static Type GetViewType(string viewTypeName)
        {
            return ViewPresenter.Instance.GetViewType(viewTypeName);
        }

        /// <summary>
        /// Gets value converter for view field type.
        /// </summary>
        public static ValueConverter GetValueConverterForType(string viewFieldType)
        {
            return ViewPresenter.Instance.GetValueConverterForType(viewFieldType);
        }

        /// <summary>
        /// Gets value converter.
        /// </summary>
        public static ValueConverter GetValueConverter(string valueConverterTypeName)
        {
            return ViewPresenter.Instance.GetValueConverter(valueConverterTypeName);
        }

        /// <summary>
        /// Gets value interpolator for view field type.
        /// </summary>
        public static ValueInterpolator GetValueInterpolatorForType(string viewFieldType)
        {
            return ViewPresenter.Instance.GetValueInterpolatorForType(viewFieldType);
        }

        #endregion
    }
}
